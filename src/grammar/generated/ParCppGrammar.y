-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParCppGrammar
  ( happyError
  , myLexer
  , pProgram
  , pBody
  , pDef
  , pListDef
  , pDecl
  , pStructDef
  , pTypeDef
  , pListDecl
  , pArg
  , pListArg
  , pIdSpec
  , pListIdSpec
  , pStm
  , pListStm
  , pExp16
  , pListString
  , pExp15
  , pExp14
  , pExp13
  , pExp12
  , pExp11
  , pExp10
  , pExp9
  , pExp8
  , pExp4
  , pExp3
  , pExp2
  , pExp1
  , pExp
  , pExp5
  , pExp6
  , pExp7
  , pListExp
  , pConstantName
  , pListConstantName
  , pType
  , pListType
  , pMaybeAss
  ) where

import Prelude

import qualified AbsCppGrammar
import LexCppGrammar

}

%name pProgram Program
%name pBody Body
%name pDef Def
%name pListDef ListDef
%name pDecl Decl
%name pStructDef StructDef
%name pTypeDef TypeDef
%name pListDecl ListDecl
%name pArg Arg
%name pListArg ListArg
%name pIdSpec IdSpec
%name pListIdSpec ListIdSpec
%name pStm Stm
%name pListStm ListStm
%name pExp16 Exp16
%name pListString ListString
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pConstantName ConstantName
%name pListConstantName ListConstantName
%name pType Type
%name pListType ListType
%name pMaybeAss MaybeAss
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'       { PT _ (TS _ 1)  }
  '!='      { PT _ (TS _ 2)  }
  '%'       { PT _ (TS _ 3)  }
  '&'       { PT _ (TS _ 4)  }
  '&&'      { PT _ (TS _ 5)  }
  '('       { PT _ (TS _ 6)  }
  ')'       { PT _ (TS _ 7)  }
  '*'       { PT _ (TS _ 8)  }
  '+'       { PT _ (TS _ 9)  }
  '++'      { PT _ (TS _ 10) }
  '+='      { PT _ (TS _ 11) }
  ','       { PT _ (TS _ 12) }
  '-'       { PT _ (TS _ 13) }
  '--'      { PT _ (TS _ 14) }
  '-='      { PT _ (TS _ 15) }
  '->'      { PT _ (TS _ 16) }
  '.'       { PT _ (TS _ 17) }
  '/'       { PT _ (TS _ 18) }
  ':'       { PT _ (TS _ 19) }
  '::'      { PT _ (TS _ 20) }
  ';'       { PT _ (TS _ 21) }
  '<'       { PT _ (TS _ 22) }
  '<<'      { PT _ (TS _ 23) }
  '<='      { PT _ (TS _ 24) }
  '='       { PT _ (TS _ 25) }
  '=='      { PT _ (TS _ 26) }
  '>'       { PT _ (TS _ 27) }
  '>='      { PT _ (TS _ 28) }
  '>>'      { PT _ (TS _ 29) }
  '?'       { PT _ (TS _ 30) }
  '['       { PT _ (TS _ 31) }
  '[]'      { PT _ (TS _ 32) }
  ']'       { PT _ (TS _ 33) }
  'bool'    { PT _ (TS _ 34) }
  'const'   { PT _ (TS _ 35) }
  'do'      { PT _ (TS _ 36) }
  'double'  { PT _ (TS _ 37) }
  'else'    { PT _ (TS _ 38) }
  'false'   { PT _ (TS _ 39) }
  'for'     { PT _ (TS _ 40) }
  'if'      { PT _ (TS _ 41) }
  'inline'  { PT _ (TS _ 42) }
  'int'     { PT _ (TS _ 43) }
  'return'  { PT _ (TS _ 44) }
  'string'  { PT _ (TS _ 45) }
  'struct'  { PT _ (TS _ 46) }
  'throw'   { PT _ (TS _ 47) }
  'true'    { PT _ (TS _ 48) }
  'typedef' { PT _ (TS _ 49) }
  'using'   { PT _ (TS _ 50) }
  'void'    { PT _ (TS _ 51) }
  'while'   { PT _ (TS _ 52) }
  '{'       { PT _ (TS _ 53) }
  '||'      { PT _ (TS _ 54) }
  '}'       { PT _ (TS _ 55) }
  L_charac  { PT _ (TC $$)   }
  L_doubl   { PT _ (TD $$)   }
  L_integ   { PT _ (TI $$)   }
  L_quoted  { PT _ (TL $$)   }
  L_Id      { PT _ (T_Id $$) }

%%

Char    :: { Char }
Char     : L_charac { (read $1) :: Char }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Id :: { AbsCppGrammar.Id }
Id  : L_Id { AbsCppGrammar.Id $1 }

Program :: { AbsCppGrammar.Program }
Program : ListDef { AbsCppGrammar.PDefs $1 }

Body :: { AbsCppGrammar.Body }
Body
  : '{' ListStm '}' { AbsCppGrammar.Body1 $2 }
  | ';' { AbsCppGrammar.Body2 }

Def :: { AbsCppGrammar.Def }
Def
  : Decl ';' { AbsCppGrammar.DVarDecl $1 }
  | Type Id '(' ListArg ')' Body { AbsCppGrammar.DFun $1 $2 $4 $6 }
  | 'inline' Type Id '(' ListArg ')' Body { AbsCppGrammar.DInlineFun $2 $3 $5 $7 }
  | 'using' Type ';' { AbsCppGrammar.DUsing $2 }
  | TypeDef { AbsCppGrammar.DTypeDef $1 }
  | StructDef ';' { AbsCppGrammar.DStruct $1 }

ListDef :: { [AbsCppGrammar.Def] }
ListDef : {- empty -} { [] } | Def ListDef { (:) $1 $2 }

Decl :: { AbsCppGrammar.Decl }
Decl : Type ListIdSpec MaybeAss { AbsCppGrammar.XDecl $1 $2 $3 }

StructDef :: { AbsCppGrammar.StructDef }
StructDef
  : 'struct' Id '{' ListDecl '}' { AbsCppGrammar.XStruct $2 $4 }

TypeDef :: { AbsCppGrammar.TypeDef }
TypeDef
  : 'typedef' Type Id ';' { AbsCppGrammar.XTypeDef $2 $3 }
  | 'typedef' StructDef Id ';' { AbsCppGrammar.XStructDef $2 $3 }

ListDecl :: { [AbsCppGrammar.Decl] }
ListDecl : {- empty -} { [] } | Decl ';' ListDecl { (:) $1 $3 }

Arg :: { AbsCppGrammar.Arg }
Arg
  : Type { AbsCppGrammar.ArgType $1 }
  | Type Id { AbsCppGrammar.ADecl $1 $2 }

ListArg :: { [AbsCppGrammar.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

IdSpec :: { AbsCppGrammar.IdSpec }
IdSpec
  : Id { AbsCppGrammar.IdSpecId $1 }
  | Id '[' Integer ']' { AbsCppGrammar.IdSpec1 $1 $3 }

ListIdSpec :: { [AbsCppGrammar.IdSpec] }
ListIdSpec
  : IdSpec { (:[]) $1 } | IdSpec ',' ListIdSpec { (:) $1 $3 }

Stm :: { AbsCppGrammar.Stm }
Stm
  : ';' { AbsCppGrammar.SEmpty }
  | Exp ';' { AbsCppGrammar.SExp $1 }
  | Decl ';' { AbsCppGrammar.SDecls $1 }
  | Type Id '=' Exp ';' { AbsCppGrammar.SInit $1 $2 $4 }
  | 'return' Exp ';' { AbsCppGrammar.SReturn $2 }
  | 'return' ';' { AbsCppGrammar.SReturnVoid }
  | 'return' Exp ';' { AbsCppGrammar.SReturnVal $2 }
  | 'while' '(' Exp ')' Stm { AbsCppGrammar.SWhile $3 $5 }
  | 'do' Stm 'while' '(' Exp ')' { AbsCppGrammar.SDoWhile $2 $5 }
  | 'for' '(' Decl ';' Exp ';' Exp ')' Stm { AbsCppGrammar.SFor $3 $5 $7 $9 }
  | 'for' '(' Exp3 '=' Exp2 ';' Exp ';' Exp ')' Stm { AbsCppGrammar.SForInit $3 $5 $7 $9 $11 }
  | '{' ListStm '}' { AbsCppGrammar.SBlock $2 }
  | TypeDef { AbsCppGrammar.STypeDef $1 }
  | 'if' '(' Exp ')' Stm { AbsCppGrammar.SIf $3 $5 }
  | 'if' '(' Exp ')' Stm 'else' Stm { AbsCppGrammar.SIfElse $3 $5 $7 }
  | StructDef ';' { AbsCppGrammar.SStructDef $1 }

ListStm :: { [AbsCppGrammar.Stm] }
ListStm : {- empty -} { [] } | Stm ListStm { (:) $1 $2 }

Exp16 :: { AbsCppGrammar.Exp }
Exp16
  : 'true' { AbsCppGrammar.ETrue }
  | 'false' { AbsCppGrammar.EFalse }
  | Integer { AbsCppGrammar.EInt $1 }
  | Double { AbsCppGrammar.EDouble $1 }
  | Char { AbsCppGrammar.EChar $1 }
  | ListConstantName { AbsCppGrammar.EId $1 }
  | ListString { AbsCppGrammar.EString $1 }
  | '(' Exp ')' { $2 }

ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }

Exp15 :: { AbsCppGrammar.Exp }
Exp15
  : Exp15 '[' Exp ']' { AbsCppGrammar.EIndex $1 $3 }
  | Exp15 '(' ListExp ')' { AbsCppGrammar.EApp $1 $3 }
  | Exp16 { $1 }

Exp14 :: { AbsCppGrammar.Exp }
Exp14
  : Exp14 '.' Exp15 { AbsCppGrammar.EDot $1 $3 }
  | Exp14 '->' Exp15 { AbsCppGrammar.EMember $1 $3 }
  | Exp15 '++' { AbsCppGrammar.EPIncr $1 }
  | Exp15 '--' { AbsCppGrammar.EPDecr $1 }
  | '*' Exp15 { AbsCppGrammar.EDeref $2 }
  | Exp15 { $1 }

Exp13 :: { AbsCppGrammar.Exp }
Exp13
  : '++' Exp14 { AbsCppGrammar.EIncr $2 }
  | '--' Exp14 { AbsCppGrammar.EDecr $2 }
  | '!' Exp14 { AbsCppGrammar.ENeg $2 }
  | Exp14 { $1 }

Exp12 :: { AbsCppGrammar.Exp }
Exp12
  : Exp12 '*' Exp13 { AbsCppGrammar.ETimes $1 $3 }
  | Exp12 '/' Exp13 { AbsCppGrammar.EDiv $1 $3 }
  | Exp12 '%' Exp13 { AbsCppGrammar.EMod $1 $3 }
  | Exp13 { $1 }

Exp11 :: { AbsCppGrammar.Exp }
Exp11
  : Exp11 '+' Exp12 { AbsCppGrammar.EPlus $1 $3 }
  | Exp11 '-' Exp12 { AbsCppGrammar.EMinus $1 $3 }
  | Exp12 { $1 }

Exp10 :: { AbsCppGrammar.Exp }
Exp10
  : Exp10 '<<' Exp11 { AbsCppGrammar.ELShift $1 $3 }
  | Exp10 '>>' Exp11 { AbsCppGrammar.ERShift $1 $3 }
  | Exp11 { $1 }

Exp9 :: { AbsCppGrammar.Exp }
Exp9
  : Exp9 '<' Exp10 { AbsCppGrammar.ELt $1 $3 }
  | Exp9 '>' Exp10 { AbsCppGrammar.EGt $1 $3 }
  | Exp9 '<=' Exp10 { AbsCppGrammar.ELtEq $1 $3 }
  | Exp9 '>=' Exp10 { AbsCppGrammar.EGtEq $1 $3 }
  | Exp10 { $1 }

Exp8 :: { AbsCppGrammar.Exp }
Exp8
  : Exp8 '==' Exp9 { AbsCppGrammar.EEq $1 $3 }
  | Exp8 '!=' Exp9 { AbsCppGrammar.ENEq $1 $3 }
  | Exp9 { $1 }

Exp4 :: { AbsCppGrammar.Exp }
Exp4 : Exp4 '&&' Exp5 { AbsCppGrammar.EAnd $1 $3 } | Exp5 { $1 }

Exp3 :: { AbsCppGrammar.Exp }
Exp3 : Exp3 '||' Exp4 { AbsCppGrammar.EOr $1 $3 } | Exp4 { $1 }

Exp2 :: { AbsCppGrammar.Exp }
Exp2
  : Exp3 '=' Exp2 { AbsCppGrammar.EAss $1 $3 }
  | Exp3 '+=' Exp2 { AbsCppGrammar.EAddAss $1 $3 }
  | Exp3 '-=' Exp2 { AbsCppGrammar.ESubAss $1 $3 }
  | Exp3 '?' Exp ':' Exp2 { AbsCppGrammar.ECond $1 $3 $5 }
  | Exp3 { $1 }

Exp1 :: { AbsCppGrammar.Exp }
Exp1 : 'throw' Exp2 { AbsCppGrammar.EThrow $2 } | Exp2 { $1 }

Exp :: { AbsCppGrammar.Exp }
Exp : Exp1 { $1 }

Exp5 :: { AbsCppGrammar.Exp }
Exp5 : Exp6 { $1 }

Exp6 :: { AbsCppGrammar.Exp }
Exp6 : Exp7 { $1 }

Exp7 :: { AbsCppGrammar.Exp }
Exp7 : Exp8 { $1 }

ListExp :: { [AbsCppGrammar.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

ConstantName :: { AbsCppGrammar.ConstantName }
ConstantName : Id { AbsCppGrammar.CNIdentifier $1 }

ListConstantName :: { [AbsCppGrammar.ConstantName] }
ListConstantName
  : ConstantName { (:[]) $1 }
  | ConstantName '::' ListConstantName { (:) $1 $3 }

Type :: { AbsCppGrammar.Type }
Type
  : 'bool' { AbsCppGrammar.Type_bool }
  | 'double' { AbsCppGrammar.Type_double }
  | 'int' { AbsCppGrammar.Type_int }
  | 'void' { AbsCppGrammar.Type_void }
  | 'string' { AbsCppGrammar.Type_string }
  | ListConstantName { AbsCppGrammar.Type_id $1 }
  | Type '[]' { AbsCppGrammar.Type_array $1 }
  | Type '&' { AbsCppGrammar.Type_ref $1 }
  | 'const' Type { AbsCppGrammar.Type_const $2 }

ListType :: { [AbsCppGrammar.Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }

MaybeAss :: { AbsCppGrammar.MaybeAss }
MaybeAss
  : '=' Exp { AbsCppGrammar.MaybeAss1 $2 }
  | {- empty -} { AbsCppGrammar.MaybeAss2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

