-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelCppGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCppGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsCppGrammar.Id -> Result
transId x = case x of
  AbsCppGrammar.Id string -> failure x

transProgram :: AbsCppGrammar.Program -> Result
transProgram x = case x of
  AbsCppGrammar.PDefs defs -> failure x

transBody :: AbsCppGrammar.Body -> Result
transBody x = case x of
  AbsCppGrammar.Body1 stms -> failure x
  AbsCppGrammar.Body2 -> failure x

transDef :: AbsCppGrammar.Def -> Result
transDef x = case x of
  AbsCppGrammar.DVarDecl decl -> failure x
  AbsCppGrammar.DFun type_ id args body -> failure x
  AbsCppGrammar.DInlineFun type_ id args body -> failure x
  AbsCppGrammar.DUsing type_ -> failure x
  AbsCppGrammar.DTypeDef typedef -> failure x
  AbsCppGrammar.DStruct structdef -> failure x

transDecl :: AbsCppGrammar.Decl -> Result
transDecl x = case x of
  AbsCppGrammar.XDecl type_ idspecs maybeass -> failure x

transStructDef :: AbsCppGrammar.StructDef -> Result
transStructDef x = case x of
  AbsCppGrammar.XStruct id decls -> failure x

transTypeDef :: AbsCppGrammar.TypeDef -> Result
transTypeDef x = case x of
  AbsCppGrammar.XTypeDef type_ id -> failure x
  AbsCppGrammar.XStructDef structdef id -> failure x

transArg :: AbsCppGrammar.Arg -> Result
transArg x = case x of
  AbsCppGrammar.ArgType type_ -> failure x
  AbsCppGrammar.ADecl type_ id -> failure x

transIdSpec :: AbsCppGrammar.IdSpec -> Result
transIdSpec x = case x of
  AbsCppGrammar.IdSpecId id -> failure x
  AbsCppGrammar.IdSpec1 id integer -> failure x

transStm :: AbsCppGrammar.Stm -> Result
transStm x = case x of
  AbsCppGrammar.SEmpty -> failure x
  AbsCppGrammar.SExp exp -> failure x
  AbsCppGrammar.SDecls decl -> failure x
  AbsCppGrammar.SInit type_ id exp -> failure x
  AbsCppGrammar.SReturn exp -> failure x
  AbsCppGrammar.SReturnVoid -> failure x
  AbsCppGrammar.SReturnVal exp -> failure x
  AbsCppGrammar.SWhile exp stm -> failure x
  AbsCppGrammar.SDoWhile stm exp -> failure x
  AbsCppGrammar.SFor decl exp1 exp2 stm -> failure x
  AbsCppGrammar.SForInit exp1 exp2 exp3 exp4 stm -> failure x
  AbsCppGrammar.SBlock stms -> failure x
  AbsCppGrammar.STypeDef typedef -> failure x
  AbsCppGrammar.SIf exp stm -> failure x
  AbsCppGrammar.SIfElse exp stm1 stm2 -> failure x
  AbsCppGrammar.SStructDef structdef -> failure x

transExp :: AbsCppGrammar.Exp -> Result
transExp x = case x of
  AbsCppGrammar.ETrue -> failure x
  AbsCppGrammar.EFalse -> failure x
  AbsCppGrammar.EInt integer -> failure x
  AbsCppGrammar.EDouble double -> failure x
  AbsCppGrammar.EChar char -> failure x
  AbsCppGrammar.EId constantnames -> failure x
  AbsCppGrammar.EString strings -> failure x
  AbsCppGrammar.EIndex exp1 exp2 -> failure x
  AbsCppGrammar.EApp exp exps -> failure x
  AbsCppGrammar.EDot exp1 exp2 -> failure x
  AbsCppGrammar.EMember exp1 exp2 -> failure x
  AbsCppGrammar.EPIncr exp -> failure x
  AbsCppGrammar.EPDecr exp -> failure x
  AbsCppGrammar.EDeref exp -> failure x
  AbsCppGrammar.EIncr exp -> failure x
  AbsCppGrammar.EDecr exp -> failure x
  AbsCppGrammar.ENeg exp -> failure x
  AbsCppGrammar.ETimes exp1 exp2 -> failure x
  AbsCppGrammar.EDiv exp1 exp2 -> failure x
  AbsCppGrammar.EMod exp1 exp2 -> failure x
  AbsCppGrammar.EPlus exp1 exp2 -> failure x
  AbsCppGrammar.EMinus exp1 exp2 -> failure x
  AbsCppGrammar.ELShift exp1 exp2 -> failure x
  AbsCppGrammar.ERShift exp1 exp2 -> failure x
  AbsCppGrammar.ELt exp1 exp2 -> failure x
  AbsCppGrammar.EGt exp1 exp2 -> failure x
  AbsCppGrammar.ELtEq exp1 exp2 -> failure x
  AbsCppGrammar.EGtEq exp1 exp2 -> failure x
  AbsCppGrammar.EEq exp1 exp2 -> failure x
  AbsCppGrammar.ENEq exp1 exp2 -> failure x
  AbsCppGrammar.EAnd exp1 exp2 -> failure x
  AbsCppGrammar.EOr exp1 exp2 -> failure x
  AbsCppGrammar.EAss exp1 exp2 -> failure x
  AbsCppGrammar.EAddAss exp1 exp2 -> failure x
  AbsCppGrammar.ESubAss exp1 exp2 -> failure x
  AbsCppGrammar.ECond exp1 exp2 exp3 -> failure x
  AbsCppGrammar.EThrow exp -> failure x
  AbsCppGrammar.ETyped exp type_ -> failure x

transConstantName :: AbsCppGrammar.ConstantName -> Result
transConstantName x = case x of
  AbsCppGrammar.CNIdentifier id -> failure x

transType :: AbsCppGrammar.Type -> Result
transType x = case x of
  AbsCppGrammar.Type_bool -> failure x
  AbsCppGrammar.Type_double -> failure x
  AbsCppGrammar.Type_int -> failure x
  AbsCppGrammar.Type_void -> failure x
  AbsCppGrammar.Type_string -> failure x
  AbsCppGrammar.Type_id constantnames -> failure x
  AbsCppGrammar.Type_array type_ -> failure x
  AbsCppGrammar.Type_ref type_ -> failure x
  AbsCppGrammar.Type_const type_ -> failure x

transMaybeAss :: AbsCppGrammar.MaybeAss -> Result
transMaybeAss x = case x of
  AbsCppGrammar.MaybeAss1 exp -> failure x
  AbsCppGrammar.MaybeAss2 -> failure x
