-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintCppGrammar.

module PrintCppGrammar where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsCppGrammar

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsCppGrammar.Id where
  prt _ (AbsCppGrammar.Id i) = doc $ showString i
instance Print AbsCppGrammar.Program where
  prt i = \case
    AbsCppGrammar.PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print AbsCppGrammar.Body where
  prt i = \case
    AbsCppGrammar.Body1 stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsCppGrammar.Body2 -> prPrec i 0 (concatD [doc (showString ";")])

instance Print AbsCppGrammar.Def where
  prt i = \case
    AbsCppGrammar.DVarDecl decl -> prPrec i 0 (concatD [prt 0 decl, doc (showString ";")])
    AbsCppGrammar.DFun type_ id_ args body -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 body])
    AbsCppGrammar.DInlineFun type_ id_ args body -> prPrec i 0 (concatD [doc (showString "inline"), prt 0 type_, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 body])
    AbsCppGrammar.DUsing type_ -> prPrec i 0 (concatD [doc (showString "using"), prt 0 type_, doc (showString ";")])
    AbsCppGrammar.DTypeDef typedef -> prPrec i 0 (concatD [prt 0 typedef])
    AbsCppGrammar.DStruct structdef -> prPrec i 0 (concatD [prt 0 structdef, doc (showString ";")])

instance Print [AbsCppGrammar.Def] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsCppGrammar.Decl where
  prt i = \case
    AbsCppGrammar.XDecl type_ idspecs maybeass -> prPrec i 0 (concatD [prt 0 type_, prt 0 idspecs, prt 0 maybeass])

instance Print AbsCppGrammar.StructDef where
  prt i = \case
    AbsCppGrammar.XStruct id_ decls -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 id_, doc (showString "{"), prt 0 decls, doc (showString "}")])

instance Print AbsCppGrammar.TypeDef where
  prt i = \case
    AbsCppGrammar.XTypeDef type_ id_ -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 type_, prt 0 id_, doc (showString ";")])
    AbsCppGrammar.XStructDef structdef id_ -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 structdef, prt 0 id_, doc (showString ";")])

instance Print [AbsCppGrammar.Decl] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print AbsCppGrammar.Arg where
  prt i = \case
    AbsCppGrammar.ArgType type_ -> prPrec i 0 (concatD [prt 0 type_])
    AbsCppGrammar.ADecl type_ id_ -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_])

instance Print [AbsCppGrammar.Arg] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsCppGrammar.IdSpec where
  prt i = \case
    AbsCppGrammar.IdSpecId id_ -> prPrec i 0 (concatD [prt 0 id_])
    AbsCppGrammar.IdSpec1 id_ n -> prPrec i 0 (concatD [prt 0 id_, doc (showString "["), prt 0 n, doc (showString "]")])

instance Print [AbsCppGrammar.IdSpec] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsCppGrammar.Stm where
  prt i = \case
    AbsCppGrammar.SEmpty -> prPrec i 0 (concatD [doc (showString ";")])
    AbsCppGrammar.SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    AbsCppGrammar.SDecls decl -> prPrec i 0 (concatD [prt 0 decl, doc (showString ";")])
    AbsCppGrammar.SInit type_ id_ exp -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_, doc (showString "="), prt 0 exp, doc (showString ";")])
    AbsCppGrammar.SReturn exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    AbsCppGrammar.SReturnVoid -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    AbsCppGrammar.SReturnVal exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    AbsCppGrammar.SWhile exp stm -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    AbsCppGrammar.SDoWhile stm exp -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stm, doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")")])
    AbsCppGrammar.SFor decl exp1 exp2 stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 decl, doc (showString ";"), prt 0 exp1, doc (showString ";"), prt 0 exp2, doc (showString ")"), prt 0 stm])
    AbsCppGrammar.SForInit exp1 exp2 exp3 exp4 stm -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 3 exp1, doc (showString "="), prt 2 exp2, doc (showString ";"), prt 0 exp3, doc (showString ";"), prt 0 exp4, doc (showString ")"), prt 0 stm])
    AbsCppGrammar.SBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsCppGrammar.STypeDef typedef -> prPrec i 0 (concatD [prt 0 typedef])
    AbsCppGrammar.SIf exp stm -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    AbsCppGrammar.SIfElse exp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    AbsCppGrammar.SStructDef structdef -> prPrec i 0 (concatD [prt 0 structdef, doc (showString ";")])

instance Print [AbsCppGrammar.Stm] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsCppGrammar.Exp where
  prt i = \case
    AbsCppGrammar.ETrue -> prPrec i 16 (concatD [doc (showString "true")])
    AbsCppGrammar.EFalse -> prPrec i 16 (concatD [doc (showString "false")])
    AbsCppGrammar.EInt n -> prPrec i 16 (concatD [prt 0 n])
    AbsCppGrammar.EDouble d -> prPrec i 16 (concatD [prt 0 d])
    AbsCppGrammar.EChar c -> prPrec i 16 (concatD [prt 0 c])
    AbsCppGrammar.EId constantnames -> prPrec i 16 (concatD [prt 0 constantnames])
    AbsCppGrammar.EString strs -> prPrec i 16 (concatD [prt 0 strs])
    AbsCppGrammar.EIndex exp1 exp2 -> prPrec i 15 (concatD [prt 15 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    AbsCppGrammar.EApp exp exps -> prPrec i 15 (concatD [prt 15 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    AbsCppGrammar.EDot exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "."), prt 15 exp2])
    AbsCppGrammar.EMember exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "->"), prt 15 exp2])
    AbsCppGrammar.EPIncr exp -> prPrec i 14 (concatD [prt 15 exp, doc (showString "++")])
    AbsCppGrammar.EPDecr exp -> prPrec i 14 (concatD [prt 15 exp, doc (showString "--")])
    AbsCppGrammar.EDeref exp -> prPrec i 14 (concatD [doc (showString "*"), prt 15 exp])
    AbsCppGrammar.EIncr exp -> prPrec i 13 (concatD [doc (showString "++"), prt 14 exp])
    AbsCppGrammar.EDecr exp -> prPrec i 13 (concatD [doc (showString "--"), prt 14 exp])
    AbsCppGrammar.ENeg exp -> prPrec i 13 (concatD [doc (showString "!"), prt 14 exp])
    AbsCppGrammar.ETimes exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    AbsCppGrammar.EDiv exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "/"), prt 13 exp2])
    AbsCppGrammar.EMod exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "%"), prt 13 exp2])
    AbsCppGrammar.EPlus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "+"), prt 12 exp2])
    AbsCppGrammar.EMinus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    AbsCppGrammar.ELShift exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    AbsCppGrammar.ERShift exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    AbsCppGrammar.ELt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<"), prt 10 exp2])
    AbsCppGrammar.EGt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">"), prt 10 exp2])
    AbsCppGrammar.ELtEq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "<="), prt 10 exp2])
    AbsCppGrammar.EGtEq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    AbsCppGrammar.EEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "=="), prt 9 exp2])
    AbsCppGrammar.ENEq exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "!="), prt 9 exp2])
    AbsCppGrammar.EAnd exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "&&"), prt 5 exp2])
    AbsCppGrammar.EOr exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 4 exp2])
    AbsCppGrammar.EAss exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "="), prt 2 exp2])
    AbsCppGrammar.EAddAss exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "+="), prt 2 exp2])
    AbsCppGrammar.ESubAss exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "-="), prt 2 exp2])
    AbsCppGrammar.ECond exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "?"), prt 0 exp2, doc (showString ":"), prt 2 exp3])
    AbsCppGrammar.EThrow exp -> prPrec i 1 (concatD [doc (showString "throw"), prt 2 exp])
    AbsCppGrammar.ETyped exp type_ -> prPrec i 16 (concatD [doc (showString "("), prt 0 exp, doc (showString ":"), prt 0 type_, doc (showString ")")])

instance Print [String] where
  prt _ [] = concatD []
  prt _ [x] = concatD [printString x]
  prt _ (x:xs) = concatD [printString x, prt 0 xs]

instance Print [AbsCppGrammar.Exp] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsCppGrammar.ConstantName where
  prt i = \case
    AbsCppGrammar.CNIdentifier id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print [AbsCppGrammar.ConstantName] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "::"), prt 0 xs]

instance Print AbsCppGrammar.Type where
  prt i = \case
    AbsCppGrammar.Type_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsCppGrammar.Type_double -> prPrec i 0 (concatD [doc (showString "double")])
    AbsCppGrammar.Type_int -> prPrec i 0 (concatD [doc (showString "int")])
    AbsCppGrammar.Type_void -> prPrec i 0 (concatD [doc (showString "void")])
    AbsCppGrammar.Type_string -> prPrec i 0 (concatD [doc (showString "string")])
    AbsCppGrammar.Type_id constantnames -> prPrec i 0 (concatD [prt 0 constantnames])
    AbsCppGrammar.Type_array type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "[]")])
    AbsCppGrammar.Type_ref type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&")])
    AbsCppGrammar.Type_const type_ -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_])

instance Print [AbsCppGrammar.Type] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsCppGrammar.MaybeAss where
  prt i = \case
    AbsCppGrammar.MaybeAss1 exp -> prPrec i 0 (concatD [doc (showString "="), prt 0 exp])
    AbsCppGrammar.MaybeAss2 -> prPrec i 0 (concatD [])
