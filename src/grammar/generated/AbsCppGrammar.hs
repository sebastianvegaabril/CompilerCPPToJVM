-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language CppGrammar.

module AbsCppGrammar where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Body = Body1 [Stm] | Body2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def
    = DVarDecl Decl
    | DFun Type Id [Arg] Body
    | DInlineFun Type Id [Arg] Body
    | DUsing Type
    | DTypeDef TypeDef
    | DStruct StructDef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = XDecl Type [IdSpec] MaybeAss
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructDef = XStruct Id [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeDef = XTypeDef Type Id | XStructDef StructDef Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ArgType Type | ADecl Type Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IdSpec = IdSpecId Id | IdSpec1 Id Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SEmpty
    | SExp Exp
    | SDecls Decl
    | SInit Type Id Exp
    | SReturn Exp
    | SReturnVoid
    | SReturnVal Exp
    | SWhile Exp Stm
    | SDoWhile Stm Exp
    | SFor Decl Exp Exp Stm
    | SForInit Exp Exp Exp Exp Stm
    | SBlock [Stm]
    | STypeDef TypeDef
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SStructDef StructDef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EChar Char
    | EId [ConstantName]
    | EString [String]
    | EIndex Exp Exp
    | EApp Exp [Exp]
    | EDot Exp Exp
    | EMember Exp Exp
    | EPIncr Exp
    | EPDecr Exp
    | EDeref Exp
    | EIncr Exp
    | EDecr Exp
    | ENeg Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EAddAss Exp Exp
    | ESubAss Exp Exp
    | ECond Exp Exp Exp
    | EThrow Exp
    | ETyped Exp Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstantName = CNIdentifier Id
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = Type_bool
    | Type_double
    | Type_int
    | Type_void
    | Type_string
    | Type_id [ConstantName]
    | Type_array Type
    | Type_ref Type
    | Type_const Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MaybeAss = MaybeAss1 Exp | MaybeAss2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

